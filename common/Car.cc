#include "Car.h"
#include "Angel.h"


int faces = 102;
int numpoints = 112;

// Constructor for car
Car::Car(GLuint vertexLoc, GLuint faceLoc, GLuint modelLoc,
        vec4 pos, GLfloat theta_x, GLfloat theta_y, GLfloat theta_z,
        GLfloat scale_x, GLfloat scale_y, GLfloat scale_z)
        : vertex_loc{vertexLoc}, face_loc{faceLoc},
        model_loc{modelLoc}
    {   
    // Initializing vertices for car
    const vec4 point[numpoints] = {
            vec4(4.5, 0.75, 14.0, 1.0), //0
            vec4(4.5, 1.0, 14.0, 1.0), //1
            vec4(4.0, 1.0, 13.5, 1.0), //2
            vec4(4.5, 4.0, 14.0, 1.0), //3
            vec4(-4.5, 4.0, 14.0, 1.0), //4 
            vec4(-4.0, 1.0, 13.5, 1.0), //5
            vec4(-4.5, 1.0, 14.0, 1.0), //6
            vec4(-4.5, 0.75, 14.0, 1.0), //7
            vec4(-2.0, 0.5, 14.0, 1.0), //8
            vec4(2.0, 0.5, 14.0, 1.0), //9
            vec4(4.0, 6.0, 4.0, 1.0), //10
            vec4(3.5, 6.9, 0.4, 1.0), //11
            vec4(3.5, 7.0, 0.0, 1.0), //12
            vec4(4.0, 5.5, -7.0, 1.0), //13
            vec4(4.5, 4.0, -9.0, 1.0), //14 
            vec4(3.5, 3.8, -10.0, 1.0), //15
            vec4(-3.5, 3.8, -10.0, 1.0), //16
            vec4(-4.5, 4.0, -9.0, 1.0), //17
            vec4(-4.0, 5.5, -7.0, 1.0), //18
            vec4(-3.5, 7.0, 0.0, 1.0), //19
            vec4(-3.5, 6.9, 0.4, 1.0), //20
            vec4(-4.0, 6.0, 4.0, 1.0), //21
            vec4(-4.5, 0.75, 13.0, 1.0), //22
            vec4(-4.5, 1.0, 13.0, 1.0), //23
            vec4(-4.0, 1.0, 13.0, 1.0), //24 
            vec4(-4.5, 0.8, 13.0, 1.0), //25
            vec4(-4.0, 2.5, 12.5, 1.0), //26
            vec4(-4.5, 2.3, 12.5, 1.0), //27
            vec4(-4.5, 2.1, 12.5, 1.0), //28
            vec4(-4.0, 2.5, 10.0, 1.0), //29
            vec4(-4.5, 2.3, 10.0, 1.0), //30
            vec4(-4.5, 2.1, 10.0, 1.0), //31
            vec4(-4.0, 1.0, 9.5, 1.0), //32
            vec4(-4.5, 1.0, 9.6, 1.0), //33
            vec4(-4.5, 0.9, 9.7, 1.0), //34 
            vec4(-3.5, 0.5, 9.1, 1.0), //35
            vec4(-3.5, 0.5, 9.0, 1.0), //36
            vec4(-3.5, 0.5, -5.1, 1.0), //37
            vec4(-3.5, 0.5, -5.0, 1.0), //38
            vec4(-4.0, 1.0, -5.0, 1.0), //39
            vec4(-4.0, 0.9, -5.2, 1.0), //40
            vec4(-4.0, 1.0, -5.1, 1.0), //41
            vec4(-4.5, 2.5, -6.5, 1.0), //42
            vec4(-4.5, 2.7, -6.5, 1.0), //43
            vec4(-4.0, 2.9, -6.5, 1.0), //44 
            vec4(-4.5, 2.5, -9.0, 1.0), //45
            vec4(-4.5, 2.7, -9.0, 1.0), //46
            vec4(-4.0, 2.9, -9.0, 1.0), //47
            vec4(-4.5, 1.5, -9.25, 1.0), //48
            vec4(-4.5, 1.3, -9.25, 1.0), //49
            vec4(-4.5, 1.3, -9.15, 1.0), //50
            vec4(-4.5, 1.0, -9.25, 1.0), //51
            vec4(-4.5, 1.0, -9.15, 1.0), //52
            vec4(-4.0, 4.0, -7.0, 1.0), //53
            vec4(-4.0, 4.2, -7.0, 1.0), //54 
            vec4(-3.5, 6.8, 0.0, 1.0), //55
            vec4(-4.0, 5.8, 4.0, 1.0), //56
            vec4(-4.0, 4.2, 4.0, 1.0), //57
            vec4(-4.0, 4.0, 4.0, 1.0), //58
            vec4(4.5, 0.75, 13.0, 1.0), //59
            vec4(4.5, 1.0, 13.0, 1.0), //60
            vec4(4.0, 1.0, 13.0, 1.0), //61
            vec4(4.5, 0.8, 13.0, 1.0), //62
            vec4(4.0, 2.5, 12.5, 1.0), //63
            vec4(4.5, 2.3, 12.5, 1.0), //64 
            vec4(4.5, 2.1, 12.5, 1.0), //65
            vec4(4.0, 2.5, 10.0, 1.0), //66
            vec4(4.5, 2.3, 10.0, 1.0), //67
            vec4(4.5, 2.1, 10.0, 1.0), //68
            vec4(4.0, 1.0, 9.5, 1.0), //69
            vec4(4.5, 1.0, 9.6, 1.0), //70
            vec4(4.5, 0.9, 9.7, 1.0), //71
            vec4(3.5, 0.5, 9.1, 1.0), //72
            vec4(3.5, 0.5, 9.0, 1.0), //73
            vec4(3.5, 0.5, -5.1, 1.0), //74 
            vec4(3.5, 0.5, -5.0, 1.0), //75
            vec4(4.0, 1.0, -5.0, 1.0), //76
            vec4(4.0, 0.9, -5.2, 1.0), //77
            vec4(4.0, 1.0, -5.1, 1.0), //78
            vec4(4.5, 2.5, -6.5, 1.0), //79
            vec4(4.5, 2.7, -6.5, 1.0), //80
            vec4(4.0, 2.9, -6.5, 1.0), //81
            vec4(4.5, 2.5, -9.0, 1.0), //82
            vec4(4.5, 2.7, -9.0, 1.0), //83
            vec4(4.0, 2.9, -9.0, 1.0), //84 
            vec4(4.5, 1.5, -9.25, 1.0), //85
            vec4(4.5, 1.4, -9.25, 1.0), //86
            vec4(4.5, 1.3, -9.15, 1.0), //87
            vec4(4.5, 1.0, -9.25, 1.0), //88
            vec4(4.5, 1.0, -9.15, 1.0), //89
            vec4(4.0, 4.0, -7.0, 1.0), //90
            vec4(4.0, 4.2, -7.0, 1.0), //91
            vec4(3.5, 6.8, 0.0, 1.0), //92
            vec4(4.0, 5.8, 4.0, 1.0), //93
            vec4(4.0, 4.2, 4.0, 1.0), //94 
            vec4(4.0, 4.0, 4.0, 1.0), //95
            vec4(3.25, 0.5, -9.5, 1.0), //96
            vec4(3.0, 0.75, -9.75, 1.0), //97
            vec4(3.5, 1.0, -10.0, 1.0), //98
            vec4(3.5, 1.325, -9.6, 1.0), //99
            vec4(3.5, 1.5, -9.5, 1.0), //100
            vec4(-3.5, 1.5, -9.5, 1.0), //101 
            vec4(-3.5, 1.325, -9.6, 1.0), //102
            vec4(-3.5, 1.0, -10.0, 1.0), //103
            vec4(-3.0, 0.75, -9.75, 1.0), //104
            vec4(-3.25, 0.5, -9.5, 1.0), //105
            vec4(-3.5, 0.5, -9.0, 1.0), //106
            vec4(3.5, 0.5, -9.0, 1.0), //107
            vec4(3.5, 0.5, 13.0, 1.0), //108
            vec4(-3.5, 0.5, 13.0, 1.0), //109
            vec4(-3.5, 0.5, 0.0, 1.0), //110
            vec4(3.5, 0.5, 0.0, 1.0), //111
        };
    // Constructing each face of car
    const GLuint face [faces][4] = {
    // =========== Back =============
                {5,2,3,4}, // 0
                {1,2,5,6}, // 1
                {9,0,1,6}, // 2
                {7,8,9,6}, // 3
    // =========== Side L =============
                {5,4,24,24}, // 4
                {24,4,29,26}, // 5
                {4,17,44,29}, // 6
                {48,4,57,57}, // 7
                {57,4,56,56}, // 8
                {4,21,56,56}, // 9
                {56,21,19,55}, // 10
                {58,57,54,53}, // 11
                {32,29,44,39}, // 12
                {54,55,19,18}, // 13
                {17,54,18,18}, // 14
                {53,54,17,17}, // 15
                {17,48,47,44}, // 16
    // =========== Side R =============
                {3,2,61,61}, // 17
                {3,61,63,67}, // 18
                {3,66,81,14}, // 19
                {3,95,94,94}, // 20
                {3,94,93,93}, // 21
                {3,93,10,10}, // 22
                {10,93,92,12}, // 23
                {94,95,90,91}, // 24
                {66,69,76,81}, // 25
                {12,92,91,13}, // 26
                {13,91,14,14}, // 27
                {91,90,14,14}, // 28
                {14,81,84,85}, // 29
    // =========== Window L/R =============
                {54,57,56,55}, // 30
                {91,92,93,94}, // 31
    // =========== Wheel Well L =============
                {7,6,23,22}, // 32
                {6,5,24,25}, // 33
                {25,24,27,28}, // 34
                {23,24,26,27}, // 35
                {28,27,30,31}, // 36
                {27,26,29,30}, // 37
                {34,31,30,33}, // 38
                {30,29,32,33}, // 39
                {34,33,36,35}, // 40
                {33,32,36,36}, // 41
                {36,32,39,38}, // 42
                {37,38,41,40}, // 43
                {38,39,41,41}, // 44
                {40,41,43,42}, // 45
                {41,39,44,43}, // 46
                {42,43,46,45}, // 47
                {43,44,47,46}, // 48
                {45,46,49,50}, // 49
                {46,47,48,49}, // 50
                {50,49,51,52}, // 51
    // =========== Wheel Well R =============
                {0,59,60,1}, // 52
                {1,60,61,2}, // 53
                {62,65,64,60}, // 54
                {60,64,63,61}, // 55
                {65,68,67,64}, // 56
                {64,67,66,63}, // 57
                {68,71,70,67}, // 58
                {67,70,69,66}, // 59
                {71,72,73,70}, // 60
                {70,73,69,69}, // 61
                {73,75,76,69}, // 62
                {74,77,78,75}, // 63
                {75,78,76,76}, // 64
                {77,79,80,78}, // 65
                {78,80,81,76}, // 66
                {79,82,83,80}, // 67
                {80,83,84,81}, // 68
                {82,87,86,83}, // 69
                {83,86,85,84}, // 70
                {87,89,88,86}, // 71
    // =========== Top =============
                {3,10,21,4}, // 72
                {11,12,19,20}, // 73
                {13,16,17,18}, // 74
                {13,14,15,16}, // 75
    // =========== Top Windows =============
                {10,11,20,21}, // 76
                {12,13,18,19}, // 77
    // =========== Bottom  =============
                {0,59,108,108}, // 78
                {0,108,9,9}, // 79
                {9,108,109,8}, // 80
                {8,109,7,7}, // 81
                {7,109,22,22}, // 82
                {109,108,73,36}, // 83
                {36,73,111,110}, // 84
                {110,111,107,106}, // 85
                {106,107,96,105}, // 86
                {105,96,97,104}, // 87
    // =========== Front =============
                {14,15,100,85}, // 88
                {100,99,85,85}, // 89
                {85,88,86,86}, // 90
                {99,98,88,85}, // 91
                {97,96,88,98}, // 92
                {97,98,103,104}, // 93
                {102,103,98,99}, // 94
                {101,102,99,100}, // 95
                {101,100,15,16}, // 96
                {101,16,17,48}, // 97
                {101,48,102,102}, // 98
                {48,51,103,102}, // 99
                {51,105,104,103}, // 100
                {48,49,51,51}, // 101
            };

    glGenVertexArrays(faces, vao);
    glGenBuffers(faces, buffer);

    // Loop for binding points for faces 
    for (int i = 0; i < faces; i++) {
      glBindVertexArray(vao[i]);

      // initialize a buffer object
      glBindBuffer(GL_ARRAY_BUFFER, buffer[i]);

      vec4 A[4];
      // No need for size variable since we always use 4 vertices
      for (int j = 0; j < 4; j++) {
          A[j] = point[face[i][j]];
      }

      glBufferData(GL_ARRAY_BUFFER, 4 * sizeof(vec4), A, GL_STATIC_DRAW);
      glEnableVertexAttribArray( vertexLoc );
      glVertexAttribPointer( vertexLoc, 4, GL_FLOAT, GL_FALSE, 0,
                 BUFFER_OFFSET(0) );
    }

    // Model calculation 
    model = Translate(pos) 
            * RotateX(theta_x) * RotateY(theta_y) * RotateZ(theta_z)
            * Scale(scale_x, scale_y, scale_z);

    }

Car::~Car() 
{
    glDeleteVertexArrays(faces, vao);
    glDeleteBuffers(faces, buffer);
}


void Car::draw() const {
        // Draws car using faces
        glUniformMatrix4fv(model_loc, 1, GL_TRUE, model);

        const vec4 colors[faces] = {
// =========== Back =============
            vec4(0.658824, 0.658824, 0.658824, 1.0), // 0 
            vec4(0.2, 0.2, 0.2, 1.0), // 1
            vec4(0.2, 0.2, 0.2, 1.0), // 2
            vec4(0.2, 0.2, 0.2, 1.0), // 3
// =========== Side L =============
            vec4(0.658824, 0.658824, 0.658824, 1.0), // 4
            vec4(0.658824, 0.658824, 0.658824, 1.0), // 5
            vec4(0.658824, 0.658824, 0.658824, 1.0), // 6
            vec4(0.658824, 0.658824, 0.658824, 1.0), // 7
            vec4(0.658824, 0.658824, 0.658824, 1.0), // 8
            vec4(0.658824, 0.658824, 0.658824, 1.0), // 9
            vec4(0.658824, 0.658824, 0.658824, 1.0), // 10
            vec4(0.658824, 0.658824, 0.658824, 1.0), // 11
            vec4(0.658824, 0.658824, 0.658824, 1.0), // 12
            vec4(0.658824, 0.658824, 0.658824, 1.0), // 13
            vec4(0.658824, 0.658824, 0.658824, 1.0), // 14
            vec4(0.658824, 0.658824, 0.658824, 1.0), // 15
            vec4(0.658824, 0.658824, 0.658824, 1.0), // 16
// =========== Side R =============
            vec4(0.658824, 0.658824, 0.658824, 1.0), // 18
            vec4(0.658824, 0.658824, 0.658824, 1.0), // 19
            vec4(0.658824, 0.658824, 0.658824, 1.0), // 20
            vec4(0.658824, 0.658824, 0.658824, 1.0), // 21
            vec4(0.658824, 0.658824, 0.658824, 1.0), // 22
            vec4(0.658824, 0.658824, 0.658824, 1.0), // 23
            vec4(0.658824, 0.658824, 0.658824, 1.0), // 17
            vec4(0.658824, 0.658824, 0.658824, 1.0), // 24
            vec4(0.658824, 0.658824, 0.658824, 1.0), // 25
            vec4(0.658824, 0.658824, 0.658824, 1.0), // 26
            vec4(0.658824, 0.658824, 0.658824, 1.0), // 27
            vec4(0.658824, 0.658824, 0.658824, 1.0), // 28
            vec4(0.658824, 0.658824, 0.658824, 1.0), // 29
// =========== Window L/R =============
            vec4(0.0, 0.0, 0.0, 1.0), // 30
            vec4(0.0, 0.0, 0.0, 1.0), // 31
// =========== Wheel Well L =============
            vec4(0.2, 0.2, 0.2, 1.0), // 32
            vec4(0.2, 0.2, 0.2, 1.0), // 33
            vec4(0.2, 0.2, 0.2, 1.0), // 34
            vec4(0.2, 0.2, 0.2, 1.0), // 35
            vec4(0.2, 0.2, 0.2, 1.0), // 36
            vec4(0.2, 0.2, 0.2, 1.0), // 37
            vec4(0.2, 0.2, 0.2, 1.0), // 38
            vec4(0.2, 0.2, 0.2, 1.0), // 39
            vec4(0.2, 0.2, 0.2, 1.0), // 40
            vec4(0.2, 0.2, 0.2, 1.0), // 41
            vec4(0.2, 0.2, 0.2, 1.0), // 42
            vec4(0.2, 0.2, 0.2, 1.0), // 43
            vec4(0.2, 0.2, 0.2, 1.0), // 44
            vec4(0.2, 0.2, 0.2, 1.0), // 45
            vec4(0.2, 0.2, 0.2, 1.0), // 46
            vec4(0.2, 0.2, 0.2, 1.0), // 47
            vec4(0.2, 0.2, 0.2, 1.0), // 48
            vec4(0.2, 0.2, 0.2, 1.0), // 49
            vec4(0.2, 0.2, 0.2, 1.0), // 50
            vec4(0.2, 0.2, 0.2, 1.0), // 51
// // =========== Wheel Well R =============
            vec4(0.2, 0.2, 0.2, 1.0), // 52
            vec4(0.2, 0.2, 0.2, 1.0), // 53
            vec4(0.2, 0.2, 0.2, 1.0), // 54
            vec4(0.2, 0.2, 0.2, 1.0), // 55
            vec4(0.2, 0.2, 0.2, 1.0), // 56
            vec4(0.2, 0.2, 0.2, 1.0), // 57
            vec4(0.2, 0.2, 0.2, 1.0), // 58
            vec4(0.2, 0.2, 0.2, 1.0), // 59
            vec4(0.2, 0.2, 0.2, 1.0), // 60
            vec4(0.2, 0.2, 0.2, 1.0), // 61
            vec4(0.2, 0.2, 0.2, 1.0), // 62
            vec4(0.2, 0.2, 0.2, 1.0), // 63
            vec4(0.2, 0.2, 0.2, 1.0), // 64
            vec4(0.2, 0.2, 0.2, 1.0), // 65
            vec4(0.2, 0.2, 0.2, 1.0), // 66
            vec4(0.2, 0.2, 0.2, 1.0), // 67
            vec4(0.2, 0.2, 0.2, 1.0), // 68
            vec4(0.2, 0.2, 0.2, 1.0), // 69
            vec4(0.2, 0.2, 0.2, 1.0), // 70
            vec4(0.2, 0.2, 0.2, 1.0), // 71
// // =========== Top =============
            vec4(0.658824, 0.658824, 0.658824, 1.0), // 72
            vec4(0.658824, 0.658824, 0.658824, 1.0), // 73
            vec4(0.658824, 0.658824, 0.658824, 1.0), // 74
            vec4(0.658824, 0.658824, 0.658824, 1.0), // 75
// // =========== Top Windows =============
            vec4(0.0, 0.0, 0.0, 1.0), // 76
            vec4(0.0, 0.0, 0.0, 1.0), // 77
// // =========== Bottom  =============
            vec4(0.2, 0.2, 0.2, 1.0), // 78
            vec4(0.2, 0.2, 0.2, 1.0), // 79
            vec4(0.2, 0.2, 0.2, 1.0), // 80
            vec4(0.2, 0.2, 0.2, 1.0), // 81
            vec4(0.2, 0.2, 0.2, 1.0), // 82
            vec4(0.2, 0.2, 0.2, 1.0), // 83
            vec4(0.2, 0.2, 0.2, 1.0), // 84
            vec4(0.2, 0.2, 0.2, 1.0), // 85
            vec4(0.2, 0.2, 0.2, 1.0), // 86
            vec4(0.2, 0.2, 0.2, 1.0), // 87
// // =========== Front =============
            vec4(0.658824, 0.658824, 0.658824, 1.0), // 88
            vec4(0.2, 0.2, 0.2, 1.0), // 89
            vec4(0.2, 0.2, 0.2, 1.0), // 90
            vec4(0.2, 0.2, 0.2, 1.0), // 91
            vec4(0.2, 0.2, 0.2, 1.0), // 92
            vec4(0.2, 0.2, 0.2, 1.0), // 93
            vec4(0.2, 0.2, 0.2, 1.0), // 94
            vec4(0.2, 0.2, 0.2, 1.0), // 95
            vec4(0.658824, 0.658824, 0.658824, 1.0), // 96
            vec4(0.658824, 0.658824, 0.658824, 1.0), // 97
            vec4(0.2, 0.2, 0.2, 1.0), // 98
            vec4(0.2, 0.2, 0.2, 1.0), // 99
            vec4(0.2, 0.2, 0.2, 1.0), // 100
            vec4(0.2, 0.2, 0.2, 1.0), // 101
        };

// Loop that draws each face using GL_TRIANGLE_FAN
for(int i = 0; i < faces; i++) {
  glBindVertexArray(vao[i]);
  glUniform4fv(face_loc, 1, colors[i]);
  glDrawArrays(GL_TRIANGLE_FAN, 0, 4);
}
}

// Function to get current car position for use in camera
vec4 Car::getPosition() const {
    return vec4(model[3][0], model[3][1], model[3][2], 1.0);
}
